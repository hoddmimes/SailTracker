plugins {
    id 'java'
    id 'war'
}

def jsonVersionFilename = "${project.rootDir}/version.json"
def versionFilename = "${project.projectDir}/src/main/java/com/hoddmimes/sailtracker/generated/Version.java"


group 'com.hoddmimes.sailtracker'
version '1.0'

java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(15)
    }
}

tasks.register('bumpMajorVersion') {
    doLast {
        def jVrsFile = file(jsonVersionFilename)
        if (jVrsFile.canRead()) {
            def jVersion = new groovy.json.JsonSlurper().parseText(jVrsFile.text)
            jVersion.major = jVersion.major + 1
            jVersion.minor = 0
            jVrsFile.delete()


            def jfh = new File(jsonVersionFilename)

            jfh << "{\n"
            jfh << "     \"_comment1_\":\"this file is updated as part of the build process. The minioor is incremented for every build. Major is updated manually\", \n"

            jfh << "     \"major\" : " + jVersion.major + ",\n"
            jfh << "     \"minor\" : " + jVersion.minor + "\n"
            jfh << "}\n\n"
        }
    }
}



tasks.register('bumpVersion') {
    doLast {
        def jVrsFile = file(jsonVersionFilename)
        if (jVrsFile.canRead()) {
            def jVersion = new groovy.json.JsonSlurper().parseText(jVrsFile.text)
            jVersion.minor = jVersion.minor + 1
            jVrsFile.delete()


            def jfh = new File(jsonVersionFilename)

            jfh << "{\n"
            jfh << "     \"_comment1_\":\"this file is updated as part of the build process. The minioor is incremented for every build. Major is updated manually\", \n"

            jfh << "     \"major\" : " + jVersion.major + ",\n"
            jfh << "     \"minor\" : " + jVersion.minor + "\n"
            jfh << "}\n\n"
        }
    }
}



tasks.register('generateVersion') {
    //println  "  rootDir:      ${project.rootDir}"
    //println  "  projectDir:   ${project.projectDir}";

        // Load version data
        def jVrsFile = new File( jsonVersionFilename )
        def jVersion = new groovy.json.JsonSlurper().parseText(jVrsFile.text)

        def dateAndTime  = new Date().format('yyyy-MM-dd HH:mm:ss.SSS')

        File fh = file( versionFilename )
        if (fh.canRead()) {
            fh.delete()
        }
        fh = new File( versionFilename )

        fh << "package com.hoddmimes.sailtracker.generated;\n\n\n"
        fh << "/*\n"
        fh << "  ====================================================================================\n"
        fh << " * Note: This file is automatically generated as part of the build process (i.e. build.gradle) \n"
        fh << " * Do not change or edit this file\n"
        fh << "  =====================================================================================\n"
        fh << "*/\n\n"
        fh << "public class Version\n"
        fh << "{\n"
        fh << "    public static final String buildDate = \"" + dateAndTime + "\";\n"
        fh << "    public static final int major = " + jVersion.major + ";\n"
        fh << "    public static final int minor = " + jVersion.minor + ";\n"
        fh << "    public static final String build = \" version: " + jVersion.major + "." + jVersion.minor + " built: \" + buildDate;\n"
        fh << "}\n"

    doLast {
        println "***** Generated new Version file"
    }
}

task  renameWar(  type: Copy ) {
    from ('build/libs')
    include 'sailtracker-1.0.war'
    destinationDir file('./')
    rename 'sailtracker-1.0.war', "sailtracker.war"
    doLast {
        println('**** Renamed WAR file')
    }
}
task(generateDBObjects, type: JavaExec ) {
    main = 'JsonTransform'
    classpath = files('./libs/pojojson-generate-1.1.jar')
    args  '-xml', './xml_definitions/DBObjectsFileSet.xml'
    doLast {
        println "***** Generated SailTracker Objects"
    }
}

task deleteGeneratedFiles(type: Delete) {
    delete fileTree('src/main/java/com/hoddmimes/sailtracker/generated') {
        include '*.java'
    }
    delete fileTree('src/main/java/com/hoddmimes/sailtracker/generated/messages') {
        include '*.java'
    }
    delete fileTree('src/main/java/com/hoddmimes/sailtracker/generated/dbobjects') {
        include '*.java'
    }
    delete fileTree('src/main/java/com/hoddmimes/sailtracker/generated/dbobjects') {
        include '*.java'
    }
    delete fileTree('build/libs/*.jar') {
        include 'sailtracker.war'
    }
    delete fileTree('./') {
        include 'sailtracker.war'
    }
    doLast {
        println "***** Cleaned Generated Files"
    }
}


task(generateMessages, type: JavaExec ) {
    main = 'JsonTransform'
    classpath = files('./libs/pojojson-generate-1.1.jar')
    args  '-xml', './xml_definitions/MessagesFileSet.xml'
    doLast {
        println "***** Generated Java SailTracker Messages"
    }
}




tasks.register('generateCode') {
    doFirst {
        deleteGeneratedFiles
    }
    dependsOn( generateVersion )
    dependsOn( generateMessages )
    dependsOn( generateDBObjects )

    doLast {
        println "***** SailTracker message/objects generated"
    }
}

tasks.register('copyToHoddmimes') {
    doLast {
        ant.scp( file : "./sailtracker.war", trust : 'yes', keyfile : '${user.home}/.ssh/id_rsa', port : 11721,  todir : "bertilsson@www.hoddmimes.com:")
        println("***** Copy War to production")
    }
}

ant.taskdef(
        name: 'scp',
        classname: 'org.apache.tools.ant.taskdefs.optional.ssh.Scp',
        classpath: 'libs/ant-jsch.jar:libs/jsch-0.2.7.jar')

war.archiveBaseName='sailtracker'
project.webAppDirName = 'WebContent'

war {
    from '../WebContent' // adds a file-set to the root of the archive
}


repositories {
    mavenCentral()
}

compileJava.dependsOn( generateCode )

build.finalizedBy(renameWar)
build.finalizedBy(copyToHoddmimes)


dependencies {

    implementation fileTree(dir: 'libs', include: 'pojojson-1.1.jar')
    implementation fileTree(dir: './libs', include: 'jcommon-1.0.23.jar')

    //implementation group: 'jakarta.ws.rs', name: 'jakarta.ws.rs-api', version: '3.1.0'
    implementation group: 'javax.ws.rs', name: 'javax.ws.rs-api', version: '2.1.1'

    //providedCompile group: 'jakarta.servlet', name: 'jakarta.servlet-api', version: '6.0.0'
    providedCompile group: 'javax.servlet', name: 'javax.servlet-api', version: '4.0.1'

    implementation group: 'org.mongodb', name: 'mongo-java-driver', version: '3.12.12'
    implementation group: 'org.mongodb', name: 'mongodb-driver-core', version: '3.12.12'
    implementation group: 'org.mongodb', name: 'bson', version: '3.12.12'

    implementation group: 'org.apache.logging.log4j', name: 'log4j-api', version: '2.20.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.20.0'
    implementation group: 'org.apache.logging.log4j', name: 'log4j-slf4j-impl', version: '2.20.0'

    implementation group: 'com.googlecode.jatl', name: 'jatl', version: '0.2.3'
    implementation group: 'javax.mail', name: 'javax.mail-api', version: '1.6.2'
    implementation group: 'com.sun.mail', name: 'javax.mail', version: '1.6.2'

    implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.12.0'
    implementation group: 'commons-codec', name: 'commons-codec', version: '1.15'
    implementation group: 'com.google.code.gson', name: 'gson', version: '2.10.1'

    implementation group: 'org.glassfish.jersey.core', name: 'jersey-server', version: '2.39'
    implementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet', version: '2.39'
    implementation group: 'org.glassfish.jersey.containers', name: 'jersey-container-servlet-core', version: '2.39'
    implementation group: 'org.glassfish.jersey.inject', name: 'jersey-hk2', version: '2.39'

    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.8.1'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.8.1'
}

test {
    useJUnitPlatform()
}